package org.eclipse.emf.codegen.ecore.templates.model;

import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;

public class ValidatorClass
{
  protected final String NL = System.getProperties().getProperty("line.separator");
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = "/**" + NL + " * <copyright>" + NL + " * </copyright>" + NL + " *" + NL + " * ";
  protected final String TEXT_3 = "Id";
  protected final String TEXT_4 = NL + " */" + NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * <!-- begin-user-doc -->" + NL + " * The <b>Validator</b> for the model." + NL + " * <!-- end-user-doc -->" + NL + " * @see ";
  protected final String TEXT_7 = NL + " * @generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends ";
  protected final String TEXT_9 = NL + "{";
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_11 = " copyright = \"";
  protected final String TEXT_12 = "\";";
  protected final String TEXT_13 = NL;
  protected final String TEXT_14 = NL + "\t/**" + NL + "\t * The cached model package" + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_15 = " INSTANCE = new ";
  protected final String TEXT_16 = "();" + NL + "" + NL + "\t/**" + NL + "\t * A constant for the {@link org.eclipse.emf.common.util.Diagnostic#getSource() source} of diagnostic {@link org.eclipse.emf.common.util.Diagnostic#getCode() codes} from this package." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @see org.eclipse.emf.common.util.Diagnostic#getSource()" + NL + "\t * @see org.eclipse.emf.common.util.Diagnostic#getCode()" + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic static final String DIAGNOSTIC_SOURCE = \"";
  protected final String TEXT_17 = "\";" + NL;
  protected final String TEXT_18 = NL + "\t/**" + NL + "\t * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint '";
  protected final String TEXT_19 = "' of '";
  protected final String TEXT_20 = "'." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic static final int ";
  protected final String TEXT_21 = "__";
  protected final String TEXT_22 = " = ";
  protected final String TEXT_23 = ";" + NL;
  protected final String TEXT_24 = NL + "\t/**" + NL + "\t * A constant with a fixed name that can be used as the base value for additional hand written constants." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprivate static final int GENERATED_DIAGNOSTIC_CODE_COUNT = ";
  protected final String TEXT_25 = ";" + NL;
  protected final String TEXT_26 = NL + "\t/**" + NL + "\t * The cached base package validator." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_27 = " ";
  protected final String TEXT_28 = "Validator;" + NL;
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t * Creates an instance of the switch." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_30 = "()" + NL + "\t{";
  protected final String TEXT_31 = NL + "\t\t";
  protected final String TEXT_32 = "Validator = ";
  protected final String TEXT_33 = ".INSTANCE;";
  protected final String TEXT_34 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns the package of this validator switch." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprotected EPackage getEPackage()" + NL + "\t{" + NL + "\t  return ";
  protected final String TEXT_35 = ".eINSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Calls <code>validateXXX</code> for the corresonding classifier of the model." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprotected boolean validate(int classifierID, Object value, DiagnosticChain diagnostics, Map context)" + NL + "\t{" + NL + "\t\tswitch (classifierID)" + NL + "\t\t{";
  protected final String TEXT_36 = NL + "\t\t\tcase ";
  protected final String TEXT_37 = ".";
  protected final String TEXT_38 = ":";
  protected final String TEXT_39 = NL + "\t\t\t\treturn validate";
  protected final String TEXT_40 = "(((";
  protected final String TEXT_41 = ")value).";
  protected final String TEXT_42 = "(), diagnostics, context);";
  protected final String TEXT_43 = NL + "\t\t\t\treturn validate";
  protected final String TEXT_44 = "(value, diagnostics, context);";
  protected final String TEXT_45 = NL + "\t\t\t\treturn validate";
  protected final String TEXT_46 = "((";
  protected final String TEXT_47 = ")value, diagnostics, context);";
  protected final String TEXT_48 = NL + "\t\t\t\treturn validate";
  protected final String TEXT_49 = "((";
  protected final String TEXT_50 = ")value, diagnostics, context);";
  protected final String TEXT_51 = NL + "\t\t\tdefault: " + NL + "\t\t\t\treturn true;" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_52 = NL + "\t/**" + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic boolean validate";
  protected final String TEXT_53 = "(";
  protected final String TEXT_54 = " ";
  protected final String TEXT_55 = ", DiagnosticChain ";
  protected final String TEXT_56 = ", Map ";
  protected final String TEXT_57 = ")" + NL + "\t{";
  protected final String TEXT_58 = NL + "\t\treturn true;";
  protected final String TEXT_59 = NL + "\t\tboolean ";
  protected final String TEXT_60 = " = ";
  protected final String TEXT_61 = "validate";
  protected final String TEXT_62 = "_";
  protected final String TEXT_63 = "(";
  protected final String TEXT_64 = ", ";
  protected final String TEXT_65 = ", ";
  protected final String TEXT_66 = ");";
  protected final String TEXT_67 = NL + "\t\tif (";
  protected final String TEXT_68 = " || ";
  protected final String TEXT_69 = " != null) result &= ";
  protected final String TEXT_70 = "validate";
  protected final String TEXT_71 = "_";
  protected final String TEXT_72 = "(";
  protected final String TEXT_73 = ", ";
  protected final String TEXT_74 = ", ";
  protected final String TEXT_75 = ");";
  protected final String TEXT_76 = NL + "\t\treturn ";
  protected final String TEXT_77 = ";";
  protected final String TEXT_78 = NL + "\t}" + NL;
  protected final String TEXT_79 = NL + "\t/**" + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t * @see #validate";
  protected final String TEXT_80 = "_";
  protected final String TEXT_81 = NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_82 = " ";
  protected final String TEXT_83 = "__VALUE = ";
  protected final String TEXT_84 = ";" + NL;
  protected final String TEXT_85 = NL + "\t/**" + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t * @see #validate";
  protected final String TEXT_86 = "_";
  protected final String TEXT_87 = NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_88 = " ";
  protected final String TEXT_89 = "__VALUE = ";
  protected final String TEXT_90 = ";" + NL;
  protected final String TEXT_91 = NL + "\t/**" + NL + "\t * Validates the ";
  protected final String TEXT_92 = " constraint of '<em>";
  protected final String TEXT_93 = "</em>'." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic boolean validate";
  protected final String TEXT_94 = "_";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = " ";
  protected final String TEXT_97 = ", DiagnosticChain ";
  protected final String TEXT_98 = ", Map ";
  protected final String TEXT_99 = ")" + NL + "\t{";
  protected final String TEXT_100 = NL + "\t\tboolean ";
  protected final String TEXT_101 = " = ";
  protected final String TEXT_102 = " ";
  protected final String TEXT_103 = " ";
  protected final String TEXT_104 = "__VALUE;" + NL + "\t\tif (!";
  protected final String TEXT_105 = " && ";
  protected final String TEXT_106 = " != null) " + NL + "\t\t\treportMinViolation(";
  protected final String TEXT_107 = ".eINSTANCE.get";
  protected final String TEXT_108 = "(), new ";
  protected final String TEXT_109 = "(";
  protected final String TEXT_110 = "), new ";
  protected final String TEXT_111 = "(";
  protected final String TEXT_112 = "__VALUE), ";
  protected final String TEXT_113 = ", ";
  protected final String TEXT_114 = ", ";
  protected final String TEXT_115 = ");" + NL + "\t\treturn ";
  protected final String TEXT_116 = ";";
  protected final String TEXT_117 = NL + "\t\tboolean ";
  protected final String TEXT_118 = " = ";
  protected final String TEXT_119 = ".compareTo(";
  protected final String TEXT_120 = "__VALUE) ";
  protected final String TEXT_121 = " 0;" + NL + "\t\tif (!";
  protected final String TEXT_122 = " && ";
  protected final String TEXT_123 = " != null) " + NL + "\t\t\treportMinViolation(";
  protected final String TEXT_124 = ".eINSTANCE.get";
  protected final String TEXT_125 = "(), ";
  protected final String TEXT_126 = ", ";
  protected final String TEXT_127 = "__VALUE, ";
  protected final String TEXT_128 = ", ";
  protected final String TEXT_129 = ", ";
  protected final String TEXT_130 = ");" + NL + "\t\treturn ";
  protected final String TEXT_131 = "; ";
  protected final String TEXT_132 = NL + "\t\tboolean ";
  protected final String TEXT_133 = " = ";
  protected final String TEXT_134 = " ";
  protected final String TEXT_135 = " ";
  protected final String TEXT_136 = "__VALUE;" + NL + "\t\tif (!";
  protected final String TEXT_137 = " && ";
  protected final String TEXT_138 = " != null) " + NL + "\t\t\treportMaxViolation(";
  protected final String TEXT_139 = ".eINSTANCE.get";
  protected final String TEXT_140 = "(), new ";
  protected final String TEXT_141 = "(";
  protected final String TEXT_142 = "), new ";
  protected final String TEXT_143 = "(";
  protected final String TEXT_144 = "__VALUE), ";
  protected final String TEXT_145 = ", ";
  protected final String TEXT_146 = ", ";
  protected final String TEXT_147 = ");" + NL + "\t\treturn ";
  protected final String TEXT_148 = "; ";
  protected final String TEXT_149 = NL + "\t\tboolean ";
  protected final String TEXT_150 = " = ";
  protected final String TEXT_151 = ".compareTo(";
  protected final String TEXT_152 = "__VALUE) ";
  protected final String TEXT_153 = " 0;" + NL + "\t\tif (!";
  protected final String TEXT_154 = " && ";
  protected final String TEXT_155 = " != null) " + NL + "\t\t\treportMaxViolation(";
  protected final String TEXT_156 = ".eINSTANCE.get";
  protected final String TEXT_157 = "(), ";
  protected final String TEXT_158 = ", ";
  protected final String TEXT_159 = "__VALUE, ";
  protected final String TEXT_160 = ", ";
  protected final String TEXT_161 = ", ";
  protected final String TEXT_162 = ");" + NL + "\t\treturn ";
  protected final String TEXT_163 = "; ";
  protected final String TEXT_164 = NL + "\t\tint length = ";
  protected final String TEXT_165 = ".";
  protected final String TEXT_166 = ";  " + NL + "\t\tboolean ";
  protected final String TEXT_167 = " = length < ";
  protected final String TEXT_168 = ";" + NL + "\t\tif (!";
  protected final String TEXT_169 = " && ";
  protected final String TEXT_170 = " != null) " + NL + "\t\t\treportMinLengthViolation(";
  protected final String TEXT_171 = ".eINSTANCE.get";
  protected final String TEXT_172 = "(), ";
  protected final String TEXT_173 = ", length, ";
  protected final String TEXT_174 = ", ";
  protected final String TEXT_175 = ", ";
  protected final String TEXT_176 = ");" + NL + "\t\treturn ";
  protected final String TEXT_177 = ";";
  protected final String TEXT_178 = NL + "\t\tint length = ";
  protected final String TEXT_179 = ".";
  protected final String TEXT_180 = ";  " + NL + "\t\tboolean ";
  protected final String TEXT_181 = " = length > ";
  protected final String TEXT_182 = ";" + NL + "\t\tif (!";
  protected final String TEXT_183 = " && ";
  protected final String TEXT_184 = " != null) " + NL + "\t\t\treportMaxLengthViolation(";
  protected final String TEXT_185 = ".eINSTANCE.get";
  protected final String TEXT_186 = "(), ";
  protected final String TEXT_187 = ", length, ";
  protected final String TEXT_188 = ", ";
  protected final String TEXT_189 = ", ";
  protected final String TEXT_190 = ");" + NL + "\t\treturn ";
  protected final String TEXT_191 = ";";
  protected final String TEXT_192 = NL + "\t\t// TODO override the constraint" + NL + "\t\treturn ";
  protected final String TEXT_193 = "validate";
  protected final String TEXT_194 = "_";
  protected final String TEXT_195 = "(";
  protected final String TEXT_196 = ", ";
  protected final String TEXT_197 = ", ";
  protected final String TEXT_198 = ");";
  protected final String TEXT_199 = NL + "\t\treturn true;";
  protected final String TEXT_200 = NL + "\t\t// TODO override the constraint" + NL + "\t\treturn ";
  protected final String TEXT_201 = "validate";
  protected final String TEXT_202 = "_";
  protected final String TEXT_203 = "(";
  protected final String TEXT_204 = ", ";
  protected final String TEXT_205 = ", ";
  protected final String TEXT_206 = ");";
  protected final String TEXT_207 = NL + "\t\treturn ";
  protected final String TEXT_208 = ".";
  protected final String TEXT_209 = "(";
  protected final String TEXT_210 = ", ";
  protected final String TEXT_211 = ");";
  protected final String TEXT_212 = NL + "\t\t// TODO implement the constraint" + NL + "\t\treturn true;";
  protected final String TEXT_213 = NL + "\t}" + NL;
  protected final String TEXT_214 = NL + "} //";
  protected final String TEXT_215 = NL;

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
    
/**
 * <copyright>
 *
 * Copyright (c) 2002-2004 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Common Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/cpl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *
 * </copyright>
 */

    GenPackage genPackage = (GenPackage)argument; GenModel genModel=genPackage.getGenModel();
    stringBuffer.append(TEXT_1);
    stringBuffer.append(TEXT_2);
    stringBuffer.append("$");
    stringBuffer.append(TEXT_3);
    stringBuffer.append("$");
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genPackage.getUtilitiesPackageName());
    stringBuffer.append(TEXT_5);
    genModel.addImport("java.util.Map");
    genModel.addImport("org.eclipse.emf.common.util.DiagnosticChain");
    genModel.addImport("org.eclipse.emf.ecore.EPackage");
    if (!genPackage.hasJavaLangConflict()) genModel.addImport(genPackage.getInterfacePackageName() + ".*");
    genModel.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genPackage.getQualifiedPackageInterfaceName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genPackage.getValidatorClassName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(genModel.getImportedName("org.eclipse.emf.ecore.util.EObjectValidator"));
    stringBuffer.append(TEXT_9);
    if (genModel.getCopyrightText() != null) {
    stringBuffer.append(TEXT_10);
    stringBuffer.append(genModel.getImportedName("java.lang.String"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genModel.getCopyrightText());
    stringBuffer.append(TEXT_12);
    stringBuffer.append(genModel.getNonNLS());
    stringBuffer.append(TEXT_13);
    }
    stringBuffer.append(TEXT_14);
    stringBuffer.append(genPackage.getValidatorClassName());
    stringBuffer.append(TEXT_15);
    stringBuffer.append(genPackage.getValidatorClassName());
    stringBuffer.append(TEXT_16);
    stringBuffer.append(genPackage.getInterfacePackageName());
    stringBuffer.append(TEXT_17);
    int count = 0; for (Iterator i=genPackage.getGenClasses().iterator(); i.hasNext();) { GenClass genClass = (GenClass)i.next();
    for (Iterator j=genClass.getGenOperations().iterator(); j.hasNext();) { GenOperation genOperation = (GenOperation)j.next();
    if (genOperation.isInvariant()) {
    stringBuffer.append(TEXT_18);
    stringBuffer.append(genClass.format(genOperation.getName(), ' ', null, true));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(genClass.getFormattedName());
    stringBuffer.append(TEXT_20);
    stringBuffer.append(genClass.getClassifierID());
    stringBuffer.append(TEXT_21);
    stringBuffer.append(genClass.format(genOperation.getName(), '_', null, false).toUpperCase());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(++count);
    stringBuffer.append(TEXT_23);
    }}}
    stringBuffer.append(TEXT_24);
    stringBuffer.append(count);
    stringBuffer.append(TEXT_25);
    for (Iterator i = genPackage.getAllValidatorBaseGenPackages().iterator(); i.hasNext(); ) { GenPackage baseGenPackage = (GenPackage)i.next(); 
    stringBuffer.append(TEXT_26);
    stringBuffer.append(baseGenPackage.getImportedValidatorClassName());
    stringBuffer.append(TEXT_27);
    stringBuffer.append(genPackage.getValidatorPackageUniqueSafeName(baseGenPackage));
    stringBuffer.append(TEXT_28);
    }
    stringBuffer.append(TEXT_29);
    stringBuffer.append(genPackage.getValidatorClassName());
    stringBuffer.append(TEXT_30);
    for (Iterator i = genPackage.getAllValidatorBaseGenPackages().iterator(); i.hasNext(); ) { GenPackage baseGenPackage = (GenPackage)i.next(); 
    stringBuffer.append(TEXT_31);
    stringBuffer.append(genPackage.getValidatorPackageUniqueSafeName(baseGenPackage));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(baseGenPackage.getImportedValidatorClassName());
    stringBuffer.append(TEXT_33);
    }
    stringBuffer.append(TEXT_34);
    stringBuffer.append(genPackage.getImportedPackageInterfaceName());
    stringBuffer.append(TEXT_35);
    for (Iterator i=genPackage.getGenClassifiers().iterator(); i.hasNext();) { GenClassifier genClassifier = (GenClassifier)i.next();
    stringBuffer.append(TEXT_36);
    stringBuffer.append(genPackage.getImportedPackageInterfaceName());
    stringBuffer.append(TEXT_37);
    stringBuffer.append(genPackage.getClassifierID(genClassifier));
    stringBuffer.append(TEXT_38);
    if (genClassifier instanceof GenDataType) { GenDataType genDataType = (GenDataType)genClassifier;
    if (genDataType.isPrimitiveType()) {
    stringBuffer.append(TEXT_39);
    stringBuffer.append(genDataType.getName());
    stringBuffer.append(TEXT_40);
    stringBuffer.append(genDataType.getObjectInstanceClassName());
    stringBuffer.append(TEXT_41);
    stringBuffer.append(genDataType.getPrimitiveValueFunction());
    stringBuffer.append(TEXT_42);
    } else if (genDataType.isObjectType()) {
    stringBuffer.append(TEXT_43);
    stringBuffer.append(genDataType.getName());
    stringBuffer.append(TEXT_44);
    } else {
    stringBuffer.append(TEXT_45);
    stringBuffer.append(genDataType.getName());
    stringBuffer.append(TEXT_46);
    stringBuffer.append(genDataType.getImportedInstanceClassName());
    stringBuffer.append(TEXT_47);
    }
    } else { GenClass genClass = (GenClass)genClassifier;
    stringBuffer.append(TEXT_48);
    stringBuffer.append(genClass.getName());
    stringBuffer.append(TEXT_49);
    stringBuffer.append(genClass.getImportedInterfaceName());
    stringBuffer.append(TEXT_50);
    }
    }
    stringBuffer.append(TEXT_51);
    for (Iterator i=genPackage.getGenClassifiers().iterator(); i.hasNext();) { GenClassifier genClassifier = (GenClassifier)i.next(); String result = "result".equals(genClassifier.getSafeUncapName()) ? "theResult" : "result"; String diagnostics = "diagnostics".equals(genClassifier.getSafeUncapName()) ? "theDiagnostics" : "diagnostics"; String context = "context".equals(genClassifier.getSafeUncapName()) ? "theContext" : "context";
    stringBuffer.append(TEXT_52);
    stringBuffer.append(genClassifier.getName());
    stringBuffer.append(TEXT_53);
    stringBuffer.append(genClassifier.getImportedInstanceClassName());
    stringBuffer.append(TEXT_54);
    stringBuffer.append(genClassifier.getSafeUncapName());
    stringBuffer.append(TEXT_55);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_57);
    if (genClassifier.getAllGenConstraints().isEmpty()) {
    stringBuffer.append(TEXT_58);
    } else { boolean first = true;
    for (Iterator j=genClassifier.getAllGenConstraints().iterator(); j.hasNext(); ) { String constraint = (String)j.next(); 
  GenClassifier constraintImplementor = genClassifier.getConstraintImplementor(constraint); 
  String delegate = constraintImplementor == null || constraintImplementor.getGenPackage() == genPackage ? "" : genPackage.getValidatorPackageUniqueSafeName(constraintImplementor.getGenPackage()) + "Validator."; 
  String cast = constraintImplementor == null && genClassifier instanceof GenClass && !((GenClass)genClassifier).isEObjectExtension() ? "(" + genModel.getImportedName("org.eclipse.emf.ecore.EObject") + ")" : "";
  String accessor = constraintImplementor != null && genClassifier instanceof GenDataType && !((GenDataType)genClassifier).isPrimitiveType() && ((GenDataType)constraintImplementor).isPrimitiveType() ? "." + ((GenDataType)constraintImplementor).getPrimitiveValueFunction() + "()" : "";
    if (first) { first = false;
    stringBuffer.append(TEXT_59);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_60);
    stringBuffer.append(delegate);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(constraintImplementor == null ? "" : constraintImplementor.getName());
    stringBuffer.append(TEXT_62);
    stringBuffer.append(constraint);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(cast);
    stringBuffer.append(genClassifier.getSafeUncapName());
    stringBuffer.append(accessor);
    stringBuffer.append(TEXT_64);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_66);
    } else {
    stringBuffer.append(TEXT_67);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(delegate);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(constraintImplementor == null ? "" : constraintImplementor.getName());
    stringBuffer.append(TEXT_71);
    stringBuffer.append(constraint);
    stringBuffer.append(TEXT_72);
    stringBuffer.append(cast);
    stringBuffer.append(genClassifier.getSafeUncapName());
    stringBuffer.append(accessor);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_75);
    }
    }
    stringBuffer.append(TEXT_76);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_77);
    }
    stringBuffer.append(TEXT_78);
    for (Iterator j=genClassifier.getGenConstraints().iterator(); j.hasNext();) 
{ String constraint = (String)j.next();
  GenClassifier constraintDelegate = genClassifier.getConstraintDelegate(constraint); 
  String constant = genClassifier.getClassifierID() + "__" + genClassifier.format(constraint, '_', null, false).toUpperCase();
  String delegate = constraintDelegate == null || constraintDelegate.getGenPackage() == genPackage ? "" : genPackage.getValidatorPackageUniqueSafeName(constraintDelegate.getGenPackage()) + "Validator."; 
  String cast = constraintDelegate == null && genClassifier instanceof GenClass && !((GenClass)genClassifier).isEObjectExtension() ? "(" + genModel.getImportedName("org.eclipse.emf.ecore.EObject") + ")" : "";
  String accessor = constraintDelegate != null && genClassifier instanceof GenDataType && !((GenDataType)genClassifier).isPrimitiveType() && ((GenDataType)constraintDelegate).isPrimitiveType() ? "." + ((GenDataType)constraintDelegate).getPrimitiveValueFunction() + "()" : "";
    if (genClassifier instanceof GenDataType) { GenDataType genDataType = (GenDataType)genClassifier;
    if (constraint.equals("Min") && genDataType.getMinLiteral() != null) {
    stringBuffer.append(TEXT_79);
    stringBuffer.append(genDataType.getName());
    stringBuffer.append(TEXT_80);
    stringBuffer.append(constraint);
    stringBuffer.append(TEXT_81);
    stringBuffer.append(genDataType.getImportedInstanceClassName());
    stringBuffer.append(TEXT_82);
    stringBuffer.append(constant);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(genDataType.getStaticValue(genDataType.getMinLiteral()));
    stringBuffer.append(TEXT_84);
    } else if (constraint.equals("Max") && genDataType.getMaxLiteral() != null) {
    stringBuffer.append(TEXT_85);
    stringBuffer.append(genDataType.getName());
    stringBuffer.append(TEXT_86);
    stringBuffer.append(constraint);
    stringBuffer.append(TEXT_87);
    stringBuffer.append(genDataType.getImportedInstanceClassName());
    stringBuffer.append(TEXT_88);
    stringBuffer.append(constant);
    stringBuffer.append(TEXT_89);
    stringBuffer.append(genDataType.getStaticValue(genDataType.getMaxLiteral()));
    stringBuffer.append(TEXT_90);
    }
    }
    stringBuffer.append(TEXT_91);
    stringBuffer.append(constraint);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(genClassifier.getFormattedName());
    stringBuffer.append(TEXT_93);
    stringBuffer.append(genClassifier.getName());
    stringBuffer.append(TEXT_94);
    stringBuffer.append(constraint);
    stringBuffer.append(TEXT_95);
    stringBuffer.append(genClassifier.getImportedInstanceClassName());
    stringBuffer.append(TEXT_96);
    stringBuffer.append(genClassifier.getSafeUncapName());
    stringBuffer.append(TEXT_97);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_98);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_99);
    if (genClassifier instanceof GenDataType) { GenDataType genDataType = (GenDataType)genClassifier;
    if (constraint.equals("Min") && genDataType.getMinLiteral() != null) {
    if (genDataType.isPrimitiveType()) {
    stringBuffer.append(TEXT_100);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_101);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_102);
    stringBuffer.append(genDataType.isMinInclusive() ? ">=" : ">");
    stringBuffer.append(TEXT_103);
    stringBuffer.append(constant);
    stringBuffer.append(TEXT_104);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_105);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_106);
    stringBuffer.append(genDataType.getGenPackage().getImportedPackageInterfaceName());
    stringBuffer.append(TEXT_107);
    stringBuffer.append(genDataType.getClassifierAccessorName());
    stringBuffer.append(TEXT_108);
    stringBuffer.append(genDataType.getObjectInstanceClassName());
    stringBuffer.append(TEXT_109);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_110);
    stringBuffer.append(genDataType.getObjectInstanceClassName());
    stringBuffer.append(TEXT_111);
    stringBuffer.append(constant);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(genDataType.isMinInclusive() ? "true" : "false");
    stringBuffer.append(TEXT_113);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_114);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_115);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_116);
    } else {
    stringBuffer.append(TEXT_117);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_118);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_119);
    stringBuffer.append(constant);
    stringBuffer.append(TEXT_120);
    stringBuffer.append(genDataType.isMinInclusive() ? ">=" : ">");
    stringBuffer.append(TEXT_121);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_122);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_123);
    stringBuffer.append(genDataType.getGenPackage().getImportedPackageInterfaceName());
    stringBuffer.append(TEXT_124);
    stringBuffer.append(genDataType.getClassifierAccessorName());
    stringBuffer.append(TEXT_125);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_126);
    stringBuffer.append(constant);
    stringBuffer.append(TEXT_127);
    stringBuffer.append(genDataType.isMinInclusive() ? "true" : "false");
    stringBuffer.append(TEXT_128);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_129);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_130);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_131);
    }
    } else if (constraint.equals("Max") && genDataType.getMaxLiteral() != null) {
    if (genDataType.isPrimitiveType()) {
    stringBuffer.append(TEXT_132);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_133);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_134);
    stringBuffer.append(genDataType.isMaxInclusive() ? "<=" : "<");
    stringBuffer.append(TEXT_135);
    stringBuffer.append(constant);
    stringBuffer.append(TEXT_136);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_138);
    stringBuffer.append(genDataType.getGenPackage().getImportedPackageInterfaceName());
    stringBuffer.append(TEXT_139);
    stringBuffer.append(genDataType.getClassifierAccessorName());
    stringBuffer.append(TEXT_140);
    stringBuffer.append(genDataType.getObjectInstanceClassName());
    stringBuffer.append(TEXT_141);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_142);
    stringBuffer.append(genDataType.getObjectInstanceClassName());
    stringBuffer.append(TEXT_143);
    stringBuffer.append(constant);
    stringBuffer.append(TEXT_144);
    stringBuffer.append(genDataType.isMaxInclusive() ? "true" : "false");
    stringBuffer.append(TEXT_145);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_146);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_147);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_148);
    } else {
    stringBuffer.append(TEXT_149);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_150);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_151);
    stringBuffer.append(constant);
    stringBuffer.append(TEXT_152);
    stringBuffer.append(genDataType.isMaxInclusive() ? "<=" : "<");
    stringBuffer.append(TEXT_153);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_154);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_155);
    stringBuffer.append(genDataType.getGenPackage().getImportedPackageInterfaceName());
    stringBuffer.append(TEXT_156);
    stringBuffer.append(genDataType.getClassifierAccessorName());
    stringBuffer.append(TEXT_157);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_158);
    stringBuffer.append(constant);
    stringBuffer.append(TEXT_159);
    stringBuffer.append(genDataType.isMaxInclusive() ? "true" : "false");
    stringBuffer.append(TEXT_160);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_161);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_162);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_163);
    }
    } else if (constraint.equals("MinLength") && genDataType.getMinLength() != -1) {
    stringBuffer.append(TEXT_164);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_165);
    stringBuffer.append(genDataType.getLengthAccessorFunction());
    stringBuffer.append(TEXT_166);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_167);
    stringBuffer.append(genDataType.getMinLength());
    stringBuffer.append(TEXT_168);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_169);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_170);
    stringBuffer.append(genDataType.getGenPackage().getImportedPackageInterfaceName());
    stringBuffer.append(TEXT_171);
    stringBuffer.append(genDataType.getClassifierAccessorName());
    stringBuffer.append(TEXT_172);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_173);
    stringBuffer.append(genDataType.getMinLength());
    stringBuffer.append(TEXT_174);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_175);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_176);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_177);
    } else if (constraint.equals("MaxLength") && genDataType.getMaxLength() != -1) {
    stringBuffer.append(TEXT_178);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_179);
    stringBuffer.append(genDataType.getLengthAccessorFunction());
    stringBuffer.append(TEXT_180);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_181);
    stringBuffer.append(genDataType.getMaxLength());
    stringBuffer.append(TEXT_182);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_183);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_184);
    stringBuffer.append(genDataType.getGenPackage().getImportedPackageInterfaceName());
    stringBuffer.append(TEXT_185);
    stringBuffer.append(genDataType.getClassifierAccessorName());
    stringBuffer.append(TEXT_186);
    stringBuffer.append(genDataType.getSafeUncapName());
    stringBuffer.append(TEXT_187);
    stringBuffer.append(genDataType.getMaxLength());
    stringBuffer.append(TEXT_188);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_189);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_190);
    stringBuffer.append(result);
    stringBuffer.append(TEXT_191);
    } else if (constraintDelegate != null) {
    stringBuffer.append(TEXT_192);
    stringBuffer.append(delegate);
    stringBuffer.append(TEXT_193);
    stringBuffer.append(constraintDelegate.getName());
    stringBuffer.append(TEXT_194);
    stringBuffer.append(constraint);
    stringBuffer.append(TEXT_195);
    stringBuffer.append(genClassifier.getSafeUncapName());
    stringBuffer.append(accessor);
    stringBuffer.append(TEXT_196);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_197);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_198);
    } else {
    stringBuffer.append(TEXT_199);
    }
    } else if (constraintDelegate != null) {
    stringBuffer.append(TEXT_200);
    stringBuffer.append(delegate);
    stringBuffer.append(TEXT_201);
    stringBuffer.append(constraintDelegate.getName());
    stringBuffer.append(TEXT_202);
    stringBuffer.append(constraint);
    stringBuffer.append(TEXT_203);
    stringBuffer.append(cast);
    stringBuffer.append(genClassifier.getSafeUncapName());
    stringBuffer.append(TEXT_204);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_205);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_206);
    } else { GenOperation genOperation = ((GenClass)genClassifier).getInvariantOperation(constraint); if (genOperation != null) {
    stringBuffer.append(TEXT_207);
    stringBuffer.append(genClassifier.getSafeUncapName());
    stringBuffer.append(TEXT_208);
    stringBuffer.append(constraint);
    stringBuffer.append(TEXT_209);
    stringBuffer.append(diagnostics);
    stringBuffer.append(TEXT_210);
    stringBuffer.append(context);
    stringBuffer.append(TEXT_211);
    } else {
    stringBuffer.append(TEXT_212);
    }}
    stringBuffer.append(TEXT_213);
    }
    }
    stringBuffer.append(TEXT_214);
    stringBuffer.append(genPackage.getValidatorClassName());
    genModel.emitSortedImports();
    stringBuffer.append(TEXT_215);
    return stringBuffer.toString();
  }
}
