<%@ jet package="org.eclipse.emf.codegen.ecore.templates.model.tests" imports="org.eclipse.emf.codegen.ecore.genmodel.*" class="PackageExample" %>
<%
/**
 * <copyright>
 *
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *
 * </copyright>
 */
%>
<%GenPackage genPackage = (GenPackage)argument; GenModel genModel = genPackage.getGenModel();%>
<%
String _System = genModel.getImportedName("java.lang.System");
String _String = genModel.getImportedName("java.lang.String");
String _RuntimeException = genModel.getImportedName("java.lang.RuntimeException");
String _File = genModel.getImportedName("java.io.File");
String _Iterator = genModel.getImportedName("java.util.Iterator");
String _Diagnostic = genModel.getImportedName("org.eclipse.emf.common.util.Diagnostic");
String _URI = genModel.getImportedName("org.eclipse.emf.common.util.URI");
String _EObject = genModel.getImportedName("org.eclipse.emf.ecore.EObject");
String _Diagnostician = genModel.getImportedName("org.eclipse.emf.ecore.util.Diagnostician");
String _Resource = genModel.getImportedName("org.eclipse.emf.ecore.resource.Resource");
String _ResourceSet = genModel.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet");
String _ResourceSetImpl = genModel.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl");
%>
<%@ include file="../Header.jetinc"%>
package <%=genPackage.getTestsPackageName()%>;

<%genModel.markImportLocation(stringBuffer);%>

/**
 * <!-- begin-user-doc -->
 * A sample utility for the '<em><b><%=genPackage.getPackageName()%></b></em>' package.
 * <!-- end-user-doc -->
 * @generated
 */
public class <%=genPackage.getExampleClassName()%>
{
<%if (genModel.getCopyrightText() != null) {%>
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final <%=_String%> copyright = "<%=genModel.getCopyrightText()%>";<%=genModel.getNonNLS()%>
	
<%}%>
	/**
	 * <!-- begin-user-doc -->
	 * Load all the argument file paths or URIs as instances of the model.
	 * <!-- end-user-doc -->
	 * @param args the file paths or URIs.
	 * @generated
	 */
	public static void main(String[] args)
	{
		// Create a resource set to hold the resources.
		//
		<%=_ResourceSet%> resourceSet = new <%=_ResourceSetImpl%>();
		
		// Register the appropriate resource factory to handle all file extentions.
		//
		resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put
			(Resource.Factory.Registry.DEFAULT_EXTENSION, 
			 new <%=genPackage.getResource() == GenResourceKind.NONE_LITERAL ? genModel.getImportedName("org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl") : genPackage.getImportedResourceFactoryClassName()%>());

		// Register the package to ensure it is available during loading.
		//
		resourceSet.getPackageRegistry().put
			(<%=genPackage.getImportedPackageInterfaceName()%>.eNS_URI, 
			 <%=genPackage.getImportedPackageInterfaceName()%>.eINSTANCE);
        
		// If there are no arguments, emit an appropriate usage message.
		//
		if (args.length == 0)
		{
<%if (genPackage.getRootClass() != null) { GenClass rootClass = genPackage.getRootClass();%>
			System.out.println("Enter a list of file paths or URIs that have content like this:");
			try
			{
				<%=_Resource%> resource = resourceSet.createResource(<%=_URI%>.createURI("http:///My.<%=genPackage.getPrefix().toLowerCase()%>"));
  <%if (genPackage.getRootFeature() != null) { GenFeature rootFeature = rootFeature = genPackage.getRootFeature(); GenClass documentRoot = rootFeature.getGenClass();%>
				<%=documentRoot.getImportedInterfaceName()%> documentRoot = <%=genPackage.getImportedFactoryInterfaceName()%>.eINSTANCE.create<%=documentRoot.getName()%>();
				<%=rootClass.getImportedInterfaceName()%> root = <%=genPackage.getImportedFactoryInterfaceName()%>.eINSTANCE.create<%=rootClass.getName()%>();
				documentRoot.set<%=rootFeature.getCapName()%>(root);
				resource.getContents().add(documentRoot);
  <%} else {%>
				<%=rootClass.getImportedInterfaceName()%> root = <%=genPackage.getImportedFactoryInterfaceName()%>.eINSTANCE.create<%=rootClass.getName()%>();
				resource.getContents().add(root);
  <%}%>
				resource.save(<%=_System%>.out, null);
			}
			catch (<%=genModel.getImportedName("java.io.IOException")%> exception) 
			{
				exception.printStackTrace();
			}
<%} else {%>
			System.out.println("Enter a list of file paths or URIs");
<%}%>
		}
		else
		{
			// Iterate over all the arguments.
			//
			for (int i = 0; i < args.length; ++i)
			{
				// Construct the URI for the instance file.
				// The argument is treated as a file path only if it denotes an existing file.
				// Otherwise, it's directly treated as a URL.
				//
				<%=_File%> file = new <%=_File%>(args[0]);
				<%=_URI%> uri = file.isFile() ? <%=_URI%>.createFileURI(file.getAbsolutePath()): URI.createURI(args[0]);

				try
				{
					// Demand load resource for this file.
					//
					<%=_Resource%> resource = resourceSet.getResource(uri, true);
					System.out.println("Loaded " + uri);

					// Validate the contents of the loaded resource.
					//
					for (<%=_Iterator%> j = resource.getContents().iterator(); j.hasNext(); )
					{
						<%=_EObject%> eObject = (<%=_EObject%>)j.next();
						<%=_Diagnostic%> diagnostic = <%=_Diagnostician%>.INSTANCE.validate(eObject);
						if (diagnostic.getSeverity() != Diagnostic.OK)
						{
							printDiagnostic(diagnostic, "");
						}
					}
				}
				catch (<%=_RuntimeException%> exception) 
				{
					System.out.println("Problem loading " + uri);
					exception.printStackTrace();
				}
			}
		}
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * Prints diagnostics with indentation.
	 * <!-- end-user-doc -->
	 * @param diagnostic the diagnostic to print.
	 * @param indent the indentation for printing.
	 * @generated
	 */
	protected static void printDiagnostic(Diagnostic diagnostic, String indent)
	{
		System.out.print(indent);
		System.out.println(diagnostic.getMessage());
		for (Iterator i = diagnostic.getChildren().iterator(); i.hasNext(); )
		{
			printDiagnostic((Diagnostic)i.next(), indent + "  ");
		}
	}

} //<%=genPackage.getExampleClassName()%>
<%genModel.emitSortedImports();%>
